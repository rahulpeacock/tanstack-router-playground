/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as LayoutImport } from './routes/_layout'
import { Route as UseridImport } from './routes/$user_id'
import { Route as IndexImport } from './routes/index'
import { Route as PostsIndexImport } from './routes/posts.index'
import { Route as LayoutHelloImport } from './routes/_layout/hello'
import { Route as LayoutFirstImport } from './routes/_layout/first'
import { Route as LayoutPathlessImport } from './routes/_layout/_pathless'
import { Route as layoutTwoSecondImport } from './routes/(layout-two)/second'
import { Route as PostsHelloIndexImport } from './routes/posts.hello.index'
import { Route as PostsHelloWorldImport } from './routes/posts.hello.world'
import { Route as LayoutHelloWorldImport } from './routes/_layout/hello_.world'
import { Route as LayoutPathlessAIndexImport } from './routes/_layout/_pathless.a.index'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const UseridRoute = UseridImport.update({
  id: '/$user_id',
  path: '/$user_id',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any)

const LayoutHelloRoute = LayoutHelloImport.update({
  id: '/hello',
  path: '/hello',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutFirstRoute = LayoutFirstImport.update({
  id: '/first',
  path: '/first',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutPathlessRoute = LayoutPathlessImport.update({
  id: '/_pathless',
  getParentRoute: () => LayoutRoute,
} as any)

const layoutTwoSecondRoute = layoutTwoSecondImport.update({
  id: '/(layout-two)/second',
  path: '/second',
  getParentRoute: () => rootRoute,
} as any)

const PostsHelloIndexRoute = PostsHelloIndexImport.update({
  id: '/posts/hello/',
  path: '/posts/hello/',
  getParentRoute: () => rootRoute,
} as any)

const PostsHelloWorldRoute = PostsHelloWorldImport.update({
  id: '/posts/hello/world',
  path: '/posts/hello/world',
  getParentRoute: () => rootRoute,
} as any)

const LayoutHelloWorldRoute = LayoutHelloWorldImport.update({
  id: '/hello_/world',
  path: '/hello/world',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutPathlessAIndexRoute = LayoutPathlessAIndexImport.update({
  id: '/a/',
  path: '/a/',
  getParentRoute: () => LayoutPathlessRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$user_id': {
      id: '/$user_id'
      path: '/$user_id'
      fullPath: '/$user_id'
      preLoaderRoute: typeof UseridImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/(layout-two)/second': {
      id: '/(layout-two)/second'
      path: '/second'
      fullPath: '/second'
      preLoaderRoute: typeof layoutTwoSecondImport
      parentRoute: typeof rootRoute
    }
    '/_layout/_pathless': {
      id: '/_layout/_pathless'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutPathlessImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/first': {
      id: '/_layout/first'
      path: '/first'
      fullPath: '/first'
      preLoaderRoute: typeof LayoutFirstImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/hello': {
      id: '/_layout/hello'
      path: '/hello'
      fullPath: '/hello'
      preLoaderRoute: typeof LayoutHelloImport
      parentRoute: typeof LayoutImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof rootRoute
    }
    '/_layout/hello_/world': {
      id: '/_layout/hello_/world'
      path: '/hello/world'
      fullPath: '/hello/world'
      preLoaderRoute: typeof LayoutHelloWorldImport
      parentRoute: typeof LayoutImport
    }
    '/posts/hello/world': {
      id: '/posts/hello/world'
      path: '/posts/hello/world'
      fullPath: '/posts/hello/world'
      preLoaderRoute: typeof PostsHelloWorldImport
      parentRoute: typeof rootRoute
    }
    '/posts/hello/': {
      id: '/posts/hello/'
      path: '/posts/hello'
      fullPath: '/posts/hello'
      preLoaderRoute: typeof PostsHelloIndexImport
      parentRoute: typeof rootRoute
    }
    '/_layout/_pathless/a/': {
      id: '/_layout/_pathless/a/'
      path: '/a'
      fullPath: '/a'
      preLoaderRoute: typeof LayoutPathlessAIndexImport
      parentRoute: typeof LayoutPathlessImport
    }
  }
}

// Create and export the route tree

interface LayoutPathlessRouteChildren {
  LayoutPathlessAIndexRoute: typeof LayoutPathlessAIndexRoute
}

const LayoutPathlessRouteChildren: LayoutPathlessRouteChildren = {
  LayoutPathlessAIndexRoute: LayoutPathlessAIndexRoute,
}

const LayoutPathlessRouteWithChildren = LayoutPathlessRoute._addFileChildren(
  LayoutPathlessRouteChildren,
)

interface LayoutRouteChildren {
  LayoutPathlessRoute: typeof LayoutPathlessRouteWithChildren
  LayoutFirstRoute: typeof LayoutFirstRoute
  LayoutHelloRoute: typeof LayoutHelloRoute
  LayoutHelloWorldRoute: typeof LayoutHelloWorldRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutPathlessRoute: LayoutPathlessRouteWithChildren,
  LayoutFirstRoute: LayoutFirstRoute,
  LayoutHelloRoute: LayoutHelloRoute,
  LayoutHelloWorldRoute: LayoutHelloWorldRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$user_id': typeof UseridRoute
  '': typeof LayoutPathlessRouteWithChildren
  '/about': typeof AboutRoute
  '/second': typeof layoutTwoSecondRoute
  '/first': typeof LayoutFirstRoute
  '/hello': typeof LayoutHelloRoute
  '/posts': typeof PostsIndexRoute
  '/hello/world': typeof LayoutHelloWorldRoute
  '/posts/hello/world': typeof PostsHelloWorldRoute
  '/posts/hello': typeof PostsHelloIndexRoute
  '/a': typeof LayoutPathlessAIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$user_id': typeof UseridRoute
  '': typeof LayoutPathlessRouteWithChildren
  '/about': typeof AboutRoute
  '/second': typeof layoutTwoSecondRoute
  '/first': typeof LayoutFirstRoute
  '/hello': typeof LayoutHelloRoute
  '/posts': typeof PostsIndexRoute
  '/hello/world': typeof LayoutHelloWorldRoute
  '/posts/hello/world': typeof PostsHelloWorldRoute
  '/posts/hello': typeof PostsHelloIndexRoute
  '/a': typeof LayoutPathlessAIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$user_id': typeof UseridRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/about': typeof AboutRoute
  '/(layout-two)/second': typeof layoutTwoSecondRoute
  '/_layout/_pathless': typeof LayoutPathlessRouteWithChildren
  '/_layout/first': typeof LayoutFirstRoute
  '/_layout/hello': typeof LayoutHelloRoute
  '/posts/': typeof PostsIndexRoute
  '/_layout/hello_/world': typeof LayoutHelloWorldRoute
  '/posts/hello/world': typeof PostsHelloWorldRoute
  '/posts/hello/': typeof PostsHelloIndexRoute
  '/_layout/_pathless/a/': typeof LayoutPathlessAIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$user_id'
    | ''
    | '/about'
    | '/second'
    | '/first'
    | '/hello'
    | '/posts'
    | '/hello/world'
    | '/posts/hello/world'
    | '/posts/hello'
    | '/a'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$user_id'
    | ''
    | '/about'
    | '/second'
    | '/first'
    | '/hello'
    | '/posts'
    | '/hello/world'
    | '/posts/hello/world'
    | '/posts/hello'
    | '/a'
  id:
    | '__root__'
    | '/'
    | '/$user_id'
    | '/_layout'
    | '/about'
    | '/(layout-two)/second'
    | '/_layout/_pathless'
    | '/_layout/first'
    | '/_layout/hello'
    | '/posts/'
    | '/_layout/hello_/world'
    | '/posts/hello/world'
    | '/posts/hello/'
    | '/_layout/_pathless/a/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UseridRoute: typeof UseridRoute
  LayoutRoute: typeof LayoutRouteWithChildren
  AboutRoute: typeof AboutRoute
  layoutTwoSecondRoute: typeof layoutTwoSecondRoute
  PostsIndexRoute: typeof PostsIndexRoute
  PostsHelloWorldRoute: typeof PostsHelloWorldRoute
  PostsHelloIndexRoute: typeof PostsHelloIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UseridRoute: UseridRoute,
  LayoutRoute: LayoutRouteWithChildren,
  AboutRoute: AboutRoute,
  layoutTwoSecondRoute: layoutTwoSecondRoute,
  PostsIndexRoute: PostsIndexRoute,
  PostsHelloWorldRoute: PostsHelloWorldRoute,
  PostsHelloIndexRoute: PostsHelloIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$user_id",
        "/_layout",
        "/about",
        "/(layout-two)/second",
        "/posts/",
        "/posts/hello/world",
        "/posts/hello/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$user_id": {
      "filePath": "$user_id.tsx"
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/_pathless",
        "/_layout/first",
        "/_layout/hello",
        "/_layout/hello_/world"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/(layout-two)/second": {
      "filePath": "(layout-two)/second.tsx"
    },
    "/_layout/_pathless": {
      "filePath": "_layout/_pathless.tsx",
      "parent": "/_layout",
      "children": [
        "/_layout/_pathless/a/"
      ]
    },
    "/_layout/first": {
      "filePath": "_layout/first.tsx",
      "parent": "/_layout"
    },
    "/_layout/hello": {
      "filePath": "_layout/hello.tsx",
      "parent": "/_layout"
    },
    "/posts/": {
      "filePath": "posts.index.tsx"
    },
    "/_layout/hello_/world": {
      "filePath": "_layout/hello_.world.tsx",
      "parent": "/_layout"
    },
    "/posts/hello/world": {
      "filePath": "posts.hello.world.tsx"
    },
    "/posts/hello/": {
      "filePath": "posts.hello.index.tsx"
    },
    "/_layout/_pathless/a/": {
      "filePath": "_layout/_pathless.a.index.tsx",
      "parent": "/_layout/_pathless"
    }
  }
}
ROUTE_MANIFEST_END */
